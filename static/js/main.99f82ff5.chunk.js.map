{"version":3,"sources":["components/Block/index.js","components/App/Stack/index.js","components/App/Overlays/NewGame.js","components/App/Overlays/GameOver.js","components/App/Overlays/Pause.js","sprites.js","time.js","components/App/index.js","index.js"],"names":["Block","shape","className","Stack","filling","stack","rowsToDrop","map","shapes","r","key","includes","c","NewGame","titles","GameOver","Math","floor","random","length","Pause","sprites","I","J","L","O","S","T","Z","mergeIntoStack","tetromino","sprite","bottom","left","top","right","row","stackShape","spriteShape","wouldCollide","some","dropRows","rows","emptyRow","Array","fill","reduce","splice","sleep","duration","Promise","resolve","setTimeout","initialState","status","level","createStack","getRandomTetromino","getRandomShape","Object","keys","App","state","handleKeyDown","bind","handleVisibilityChange","document","addEventListener","this","removeEventListener","e","code","startNewGame","resumeGame","col","rotateRight","rotateLeft","pauseGame","setState","hidden","fillStack","clearInterval","dropIntervalId","setInterval","moveTetrominoDown","nextTetromino","newStack","every","getRowsToDrop","deferDropLines","Component","render","getElementById"],"mappings":"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","file":"static/js/main.99f82ff5.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './index.css'\n\nconst Block = ({ shape }) => <div className={`block ${shape === ' ' ? 'void' : shape}`} />\n\nBlock.propTypes = {\n  shape: PropTypes.oneOf(['I', 'O', 'T', 'L', 'J', 'Z', 'S', ' ']).isRequired\n}\n\nexport default Block\n","import React from 'react'\n\nimport Block from '../../Block'\nimport './index.css'\nimport './filling.css'\n\nconst Stack = ({ filling, stack, rowsToDrop }) => (\n  <div className={'stack ' + (filling ? 'filling' : '')}>\n    {stack.map((shapes, r) => (\n      <div key={r} className={'row ' + ((rowsToDrop || []).includes(r) ? 'animateRowDrop' : '')}>\n        {shapes.map((shape, c) => (\n          <Block key={c} shape={shape} />\n        ))}\n      </div>\n    ))}\n  </div>\n)\n\nexport default Stack\n","import React from 'react'\n\nconst NewGame = () => (\n  <div className='backdrop'>\n    <div className='text'>\n      <h3>New Game</h3>\n      <p className='blink'>&lt;Press any key&gt;</p>\n    </div>\n  </div>\n)\n\nexport default NewGame\n","import React from 'react'\n\nconst titles = ['Ouch!', 'Too bad!', 'That hurts!']\n\nconst GameOver = () => (\n  <div className='backdrop'>\n    <div className='text'>\n      <h3>{titles[Math.floor(Math.random() * titles.length)]}</h3>\n      <p className='blink'>&lt;Press any key&gt;</p>\n    </div>\n  </div>\n)\n\nexport default GameOver\n","import React from 'react'\n\nconst Pause = () => (\n  <div className='backdrop'>\n    <div className='text'>\n      <h3>Pause</h3>\n      <p className='blink'>&lt;Press any key&gt;</p>\n    </div>\n  </div>\n)\n\nexport default Pause\n","/* prettier-ignore */\nexport const sprites = {\n  I: [\n    ['I', 'I', 'I', 'I']\n  ],\n  J: [\n    ['J', 'J', 'J'],\n    [' ', ' ', 'J']\n  ],\n  L: [\n    ['L', 'L', 'L'],\n    ['L', ' ', ' ']\n  ],\n  O: [\n    ['O', 'O'],\n    ['O', 'O']\n  ],\n  S: [\n    [' ', 'S', 'S'],\n    ['S', 'S', ' ']\n  ],\n  T: [\n    ['T', 'T', 'T'],\n    [' ', 'T', ' ']\n  ],\n  Z: [\n    ['Z', 'Z', ' '],\n    [' ', 'Z', 'Z']\n  ]\n}\n\nexport function rotateLeft (sprite) {\n  return sprite[0].map((col, c) => sprite.map((row, r) => sprite[r][row.length - c - 1]))\n}\n\nexport function rotateRight (sprite) {\n  return sprite[0].map((col, c) => sprite.map((row, r) => sprite[sprite.length - r - 1][c]))\n}\n\nexport function mergeIntoStack (tetromino, stack) {\n  const { sprite, bottom, left } = tetromino\n  const top = bottom - sprite.length + 1\n  const right = left + sprite[0].length - 1\n  return stack.map((row, r) =>\n    r < top || r > bottom\n      ? row\n      : row.map((stackShape, c) => {\n        if (c < left || c > right) {\n          return stackShape\n        }\n        const spriteShape = sprite[r - top][c - left]\n        return spriteShape === ' ' ? stackShape : spriteShape\n      })\n  )\n}\n\nexport function wouldCollide (tetromino, stack) {\n  const { sprite, bottom, left } = tetromino\n  const top = bottom - sprite.length + 1\n  const right = left + sprite[0].length - 1\n  return (\n    left < 0 ||\n    bottom >= stack.length ||\n    right >= stack[0].length ||\n    sprite.some(\n      (row, r) => r + top >= 0 && row.some((spriteShape, c) => spriteShape !== ' ' && stack[r + top][c + left] !== ' ')\n    )\n  )\n}\n\nexport function dropRows (stack, rows) {\n  const emptyRow = Array(stack[0].length).fill(' ')\n  return rows.reduce(\n    (stack, r) => {\n      stack.splice(r, 1)\n      return [emptyRow, ...stack]\n    },\n    [...stack]\n  )\n}\n\nexport function getRowsToDrop (stack) {\n  return stack.reduce(\n    (rowsToDrop, row, r) => (stack[r].every(shape => shape !== ' ') ? [...rowsToDrop, r] : rowsToDrop),\n    []\n  )\n}\n","export function sleep (duration) {\n  return new Promise(resolve => setTimeout(resolve, duration))\n}\n","import React, { Component } from 'react'\n\nimport Stack from './Stack'\nimport NewGame from './Overlays/NewGame'\nimport GameOver from './Overlays/GameOver'\nimport Pause from './Overlays/Pause'\nimport { mergeIntoStack, sprites, rotateLeft, rotateRight, wouldCollide, dropRows, getRowsToDrop } from '../../sprites'\nimport { sleep } from '../../time'\nimport './index.css'\n\nconst initialState = {\n  // Board size is 18x12\n  stack: [\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', 'O', 'O', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'I'],\n    ['J', ' ', 'O', 'O', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'I'],\n    ['J', ' ', 'Z', 'Z', 'T', 'T', 'T', ' ', 'S', 'S', ' ', 'I'],\n    ['J', 'J', ' ', 'Z', 'Z', 'T', ' ', 'S', 'S', 'L', 'L', 'I']\n  ],\n  tetromino: null,\n  status: 'new', // Can be new, playing, end, pause, filling\n  level: null,\n  rowsToDrop: []\n}\n\nclass App extends Component {\n  state = initialState\n\n  handleKeyDown = this.handleKeyDown.bind(this)\n  handleVisibilityChange = this.handleVisibilityChange.bind(this)\n\n  componentDidMount () {\n    document.addEventListener('keydown', this.handleKeyDown)\n    document.addEventListener('visibilitychange', this.handleVisibilityChange)\n  }\n\n  componentWillUnmount () {\n    document.removeEventListener('keydown', this.handleKeyDown)\n    document.removeEventListener('visibilityChange', this.handleVisibilityChange)\n  }\n\n  render () {\n    const { rowsToDrop, stack, status, tetromino } = this.state\n    return (\n      <div className='app'>\n        <div className='left pane' />\n\n        <div className='middle pane'>\n          <Stack stack={tetromino ? mergeIntoStack(tetromino, stack) : stack} rowsToDrop={rowsToDrop} />\n\n          {status === 'new' && <NewGame />}\n          {status === 'pause' && <Pause />}\n          {status === 'end' && <GameOver />}\n          {status === 'filling' && <Stack filling stack={createStack(getRandomShape())} />}\n        </div>\n\n        <div className='right pane' />\n      </div>\n    )\n  }\n\n  handleKeyDown (e) {\n    const code = e.code\n    const key = e.key\n    const { status } = this.state\n\n    if (status === 'new' || status === 'end') {\n      if (key.length === 1 || ['Enter', 'Space'].includes(code)) {\n        this.startNewGame()\n      }\n    } else if (status === 'pause') {\n      if (key.length === 1 || ['Enter', 'Space'].includes(code)) {\n        this.resumeGame()\n      }\n    } else if (status === 'playing') {\n      const { stack } = this.state\n      let {\n        tetromino,\n        tetromino: { bottom, left, sprite }\n      } = this.state\n\n      if (code === 'ArrowLeft') {\n        left--\n      } else if (code === 'ArrowRight') {\n        left++\n      } else if (code === 'ArrowDown') {\n        bottom++\n      } else if (code === 'ArrowUp' || code === 'End') {\n        left += Math.floor(sprite[0].length / 2)\n        sprite = rotateRight(sprite)\n        left -= Math.floor(sprite[0].length / 2)\n      } else if (code === 'Home') {\n        left += Math.floor(sprite[0].length / 2)\n        sprite = rotateLeft(sprite)\n        left -= Math.floor(sprite[0].length / 2)\n      } else if (code === 'Space' || code === 'Enter') {\n        while (!wouldCollide({ ...tetromino, bottom: ++bottom }, stack)) {}\n        bottom--\n      } else if (code === 'Escape') {\n        this.pauseGame()\n      } else {\n        return\n      }\n\n      tetromino = { ...tetromino, bottom, left, sprite }\n      if (!wouldCollide(tetromino, stack)) {\n        this.setState({ tetromino })\n      }\n    }\n  }\n\n  handleVisibilityChange () {\n    if (document.hidden && this.state.status === 'playing') {\n      this.pauseGame()\n    }\n  }\n\n  async startNewGame () {\n    await this.fillStack()\n\n    this.setState({\n      stack: createStack(' '),\n      level: 0,\n      rowsToDrop: [],\n      status: null,\n      tetromino: null\n    })\n\n    await sleep(1000)\n\n    this.setState({\n      tetromino: getRandomTetromino()\n    })\n\n    this.resumeGame()\n  }\n\n  pauseGame () {\n    this.setState({ status: 'pause' })\n    clearInterval(this.dropIntervalId)\n  }\n\n  resumeGame () {\n    this.setState({ status: 'playing' })\n    this.dropIntervalId = setInterval(() => this.moveTetrominoDown(), 1000)\n  }\n\n  moveTetrominoDown () {\n    const {\n      stack,\n      tetromino,\n      tetromino: { bottom }\n    } = this.state\n    const nextTetromino = { ...tetromino, bottom: bottom + 1 }\n\n    if (!wouldCollide(nextTetromino, stack)) {\n      this.setState({ tetromino: nextTetromino })\n    } else if (bottom > 1) {\n      const newStack = mergeIntoStack(tetromino, stack)\n      const rowsToDrop = getRowsToDrop(newStack)\n      this.setState({\n        stack: newStack,\n        tetromino: getRandomTetromino(),\n        rowsToDrop\n      })\n      if (rowsToDrop.length > 0) {\n        this.deferDropLines()\n      }\n    } else {\n      this.setState({ status: bottom > 1 ? 'playing' : 'end' })\n      clearInterval(this.dropIntervalId)\n    }\n  }\n\n  async deferDropLines () {\n    await sleep(400)\n    const { rowsToDrop, stack } = this.state\n    this.setState({\n      stack: dropRows(stack, rowsToDrop),\n      rowsToDrop: []\n    })\n  }\n\n  async fillStack () {\n    this.setState({ status: 'filling' })\n    await sleep(1700)\n  }\n}\n\nfunction createStack (shape) {\n  return Array(18).fill(Array(12).fill(shape))\n}\n\nfunction getRandomTetromino () {\n  return {\n    sprite: sprites[getRandomShape()],\n    bottom: 1,\n    left: 5\n  }\n}\n\nfunction getRandomShape () {\n  const shapes = Object.keys(sprites)\n  return shapes[Math.floor(Math.random() * shapes.length)]\n}\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-snapshot'\n\nimport App from './components/App'\nimport './reset.css'\nimport './variables.css'\n\nrender(<App />, document.getElementById('root'))\n"],"sourceRoot":""}
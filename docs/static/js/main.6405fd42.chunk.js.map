{"version":3,"sources":["components/Block/index.js","components/App/Stack/index.js","components/App/Overlays/NewGame.js","components/App/Overlays/GameOver.js","components/App/Overlays/Pause.js","sprites.js","time.js","components/App/index.js","index.js"],"names":["Block","_ref","shape","react_default","a","createElement","className","concat","Stack","filling","stack","rowsToDrop","map","shapes","r","key","includes","c","src_components_Block","NewGame","titles","GameOver","Math","floor","random","length","Pause","sprites","I","J","L","O","S","T","Z","mergeIntoStack","tetromino","sprite","bottom","left","top","right","row","stackShape","spriteShape","wouldCollide","some","dropRows","rows","emptyRow","Array","fill","reduce","splice","Object","toConsumableArray","sleep","duration","Promise","resolve","setTimeout","initialState","status","level","createStack","getRandomTetromino","getRandomShape","keys","App","state","handleKeyDown","_this","bind","assertThisInitialized","handleVisibilityChange","document","addEventListener","this","removeEventListener","_this$state","components_App_Stack","Overlays_NewGame","Overlays_Pause","Overlays_GameOver","e","code","startNewGame","resumeGame","_this$state2","_this$state2$tetromin","col","rotateRight","rotateLeft","objectSpread","pauseGame","setState","hidden","fillStack","clearInterval","dropIntervalId","_this2","setInterval","moveTetrominoDown","_this$state3","nextTetromino","newStack","every","getRowsToDrop","deferDropLines","Component","render","src_components_App","getElementById"],"mappings":"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","file":"static/js/main.6405fd42.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './index.css'\n\nconst Block = ({ shape }) => (\n  <div className={`block ${shape === ' ' ? 'void' : shape}`} />\n)\n\nBlock.propTypes = {\n  shape: PropTypes.oneOf(['I', 'O', 'T', 'L', 'J', 'Z', 'S', ' ']).isRequired\n}\n\nexport default Block\n","import React from 'react'\n\nimport Block from '../../Block'\nimport './index.css'\nimport './filling.css'\n\nconst Stack = ({ filling, stack, rowsToDrop }) => (\n  <div className={'stack ' + (filling ? 'filling' : '')}>\n    {stack.map((shapes, r) => (\n      <div\n        key={r}\n        className={\n          'row ' + ((rowsToDrop || []).includes(r) ? 'animateRowDrop' : '')\n        }\n      >\n        {shapes.map((shape, c) => <Block key={c} shape={shape} />)}\n      </div>\n    ))}\n  </div>\n)\n\nexport default Stack\n","import React from 'react'\n\nconst NewGame = () => (\n  <div className='backdrop'>\n    <div className='text'>\n      <h3>New Game</h3>\n      <p className='blink'>&lt;Press any key&gt;</p>\n    </div>\n  </div>\n)\n\nexport default NewGame\n","import React from 'react'\n\nconst titles = ['Ouch!', 'Too bad!', 'That hurts!']\nconst GameOver = () => (\n  <div className='backdrop'>\n    <div className='text'>\n      <h3>{titles[Math.floor(Math.random() * titles.length)]}</h3>\n      <p className='blink'>&lt;Press any key&gt;</p>\n    </div>\n  </div>\n)\n\nexport default GameOver\n","import React from 'react'\n\nconst Pause = () => (\n  <div className='backdrop'>\n    <div className='text'>\n      <h3>Pause</h3>\n      <p className='blink'>&lt;Press any key&gt;</p>\n    </div>\n  </div>\n)\n\nexport default Pause\n","/* prettier-ignore */\nexport const sprites = {\n  I: [\n    ['I', 'I', 'I', 'I']\n  ],\n  J: [\n    ['J', 'J', 'J'],\n    [' ', ' ', 'J']\n  ],\n  L: [\n    ['L', 'L', 'L'],\n    ['L', ' ', ' ']\n  ],\n  O: [\n    ['O', 'O'],\n    ['O', 'O']\n  ],\n  S: [\n    [' ', 'S', 'S'],\n    ['S', 'S', ' ']\n  ],\n  T: [\n    ['T', 'T', 'T'],\n    [' ', 'T', ' ']\n  ],\n  Z: [\n    ['Z', 'Z', ' '],\n    [' ', 'Z', 'Z']\n  ]\n}\n\nexport function rotateLeft (sprite) {\n  return sprite[0].map((col, c) =>\n    sprite.map((row, r) => sprite[r][row.length - c - 1])\n  )\n}\n\nexport function rotateRight (sprite) {\n  return sprite[0].map((col, c) =>\n    sprite.map((row, r) => sprite[sprite.length - r - 1][c])\n  )\n}\n\nexport function mergeIntoStack (tetromino, stack) {\n  const { sprite, bottom, left } = tetromino\n  const top = bottom - sprite.length + 1\n  const right = left + sprite[0].length - 1\n  return stack.map(\n    (row, r) =>\n      r < top || r > bottom\n        ? row\n        : row.map((stackShape, c) => {\n          if (c < left || c > right) {\n            return stackShape\n          }\n          const spriteShape = sprite[r - top][c - left]\n          return spriteShape === ' ' ? stackShape : spriteShape\n        })\n  )\n}\n\nexport function wouldCollide (tetromino, stack) {\n  const { sprite, bottom, left } = tetromino\n  const top = bottom - sprite.length + 1\n  const right = left + sprite[0].length - 1\n  return (\n    left < 0 ||\n    bottom >= stack.length ||\n    right >= stack[0].length ||\n    sprite.some(\n      (row, r) =>\n        r + top >= 0 &&\n        row.some(\n          (spriteShape, c) =>\n            spriteShape !== ' ' && stack[r + top][c + left] !== ' '\n        )\n    )\n  )\n}\n\nexport function dropRows (stack, rows) {\n  const emptyRow = Array(stack[0].length).fill(' ')\n  return rows.reduce(\n    (stack, r) => {\n      stack.splice(r, 1)\n      return [emptyRow, ...stack]\n    },\n    [...stack]\n  )\n}\n\nexport function getRowsToDrop (stack) {\n  return stack.reduce(\n    (rowsToDrop, row, r) =>\n      stack[r].every(shape => shape !== ' ') ? [...rowsToDrop, r] : rowsToDrop,\n    []\n  )\n}\n","export function sleep (duration) {\n  return new Promise(resolve => setTimeout(resolve, duration))\n}\n","import React, { Component } from 'react'\n\nimport Stack from './Stack'\nimport NewGame from './Overlays/NewGame'\nimport GameOver from './Overlays/GameOver'\nimport Pause from './Overlays/Pause'\nimport {\n  mergeIntoStack,\n  sprites,\n  rotateLeft,\n  rotateRight,\n  wouldCollide,\n  dropRows,\n  getRowsToDrop\n} from '../../sprites'\nimport { sleep } from '../../time'\nimport './index.css'\n\nconst initialState = {\n  // Board size is 18x12\n  stack: [\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n    [' ', ' ', 'O', 'O', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'I'],\n    ['J', ' ', 'O', 'O', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'I'],\n    ['J', ' ', 'Z', 'Z', 'T', 'T', 'T', ' ', 'S', 'S', ' ', 'I'],\n    ['J', 'J', ' ', 'Z', 'Z', 'T', ' ', 'S', 'S', 'L', 'L', 'I']\n  ],\n  tetromino: null,\n  status: 'new', // Can be new, playing, end, pause, filling\n  level: null,\n  rowsToDrop: []\n}\n\nclass App extends Component {\n  state = initialState\n\n  handleKeyDown = this.handleKeyDown.bind(this)\n  handleVisibilityChange = this.handleVisibilityChange.bind(this)\n\n  componentDidMount () {\n    document.addEventListener('keydown', this.handleKeyDown)\n    document.addEventListener('visibilitychange', this.handleVisibilityChange)\n  }\n\n  componentWillUnmount () {\n    document.removeEventListener('keydown', this.handleKeyDown)\n    document.removeEventListener(\n      'visibilityChange',\n      this.handleVisibilityChange\n    )\n  }\n\n  render () {\n    const { rowsToDrop, stack, status, tetromino } = this.state\n    return (\n      <div className='app'>\n        <div className='left pane' />\n\n        <div className='middle pane'>\n          <Stack\n            stack={tetromino ? mergeIntoStack(tetromino, stack) : stack}\n            rowsToDrop={rowsToDrop}\n          />\n\n          {status === 'new' && <NewGame />}\n          {status === 'pause' && <Pause />}\n          {status === 'end' && <GameOver />}\n          {status === 'filling' && (\n            <Stack filling stack={createStack(getRandomShape())} />\n          )}\n        </div>\n\n        <div className='right pane' />\n      </div>\n    )\n  }\n\n  handleKeyDown (e) {\n    const code = e.code\n    const key = e.key\n    const { status } = this.state\n\n    if (status === 'new' || status === 'end') {\n      if (key.length === 1 || ['Enter', 'Space'].includes(code)) {\n        this.startNewGame()\n      }\n    } else if (status === 'pause') {\n      if (key.length === 1 || ['Enter', 'Space'].includes(code)) {\n        this.resumeGame()\n      }\n    } else if (status === 'playing') {\n      const { stack } = this.state\n      let { tetromino, tetromino: { bottom, left, sprite } } = this.state\n\n      if (code === 'ArrowLeft') {\n        left--\n      } else if (code === 'ArrowRight') {\n        left++\n      } else if (code === 'ArrowDown') {\n        bottom++\n      } else if (code === 'ArrowUp' || code === 'End') {\n        left += Math.floor(sprite[0].length / 2)\n        sprite = rotateRight(sprite)\n        left -= Math.floor(sprite[0].length / 2)\n      } else if (code === 'Home') {\n        left += Math.floor(sprite[0].length / 2)\n        sprite = rotateLeft(sprite)\n        left -= Math.floor(sprite[0].length / 2)\n      } else if (code === 'Space' || code === 'Enter') {\n        while (!wouldCollide({ ...tetromino, bottom: ++bottom }, stack)) {}\n        bottom--\n      } else if (code === 'Escape') {\n        this.pauseGame()\n      } else {\n        return\n      }\n\n      tetromino = { ...tetromino, bottom, left, sprite }\n      if (!wouldCollide(tetromino, stack)) {\n        this.setState({ tetromino })\n      }\n    }\n  }\n\n  handleVisibilityChange () {\n    if (document.hidden && this.state.status === 'playing') {\n      this.pauseGame()\n    }\n  }\n\n  async startNewGame () {\n    await this.fillStack()\n\n    this.setState({\n      stack: createStack(' '),\n      level: 0,\n      rowsToDrop: [],\n      status: null,\n      tetromino: null\n    })\n\n    await sleep(1000)\n\n    this.setState({\n      tetromino: getRandomTetromino()\n    })\n\n    this.resumeGame()\n  }\n\n  pauseGame () {\n    this.setState({ status: 'pause' })\n    clearInterval(this.dropIntervalId)\n  }\n\n  resumeGame () {\n    this.setState({ status: 'playing' })\n    this.dropIntervalId = setInterval(() => this.moveTetrominoDown(), 1000)\n  }\n\n  moveTetrominoDown () {\n    const { stack, tetromino, tetromino: { bottom } } = this.state\n    const nextTetromino = { ...tetromino, bottom: bottom + 1 }\n\n    if (!wouldCollide(nextTetromino, stack)) {\n      this.setState({ tetromino: nextTetromino })\n    } else if (bottom > 1) {\n      const newStack = mergeIntoStack(tetromino, stack)\n      const rowsToDrop = getRowsToDrop(newStack)\n      this.setState({\n        stack: newStack,\n        tetromino: getRandomTetromino(),\n        rowsToDrop\n      })\n      if (rowsToDrop.length > 0) {\n        this.deferDropLines()\n      }\n    } else {\n      this.setState({ status: bottom > 1 ? 'playing' : 'end' })\n      clearInterval(this.dropIntervalId)\n    }\n  }\n\n  async deferDropLines () {\n    await sleep(400)\n    const { rowsToDrop, stack } = this.state\n    this.setState({\n      stack: dropRows(stack, rowsToDrop),\n      rowsToDrop: []\n    })\n  }\n\n  async fillStack () {\n    this.setState({ status: 'filling' })\n    await sleep(1700)\n  }\n}\n\nfunction createStack (shape) {\n  return Array(18).fill(Array(12).fill(shape))\n}\n\nfunction getRandomTetromino () {\n  return {\n    sprite: sprites[getRandomShape()],\n    bottom: 1,\n    left: 5\n  }\n}\n\nfunction getRandomShape () {\n  const shapes = Object.keys(sprites)\n  return shapes[Math.floor(Math.random() * shapes.length)]\n}\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-snapshot'\n\nimport App from './components/App'\nimport './reset.css'\nimport './variables.css'\n\nrender(<App />, document.getElementById('root'))\n"],"sourceRoot":""}